// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var changePage, collections, make_collection, searchView, search_prop, searchsView;
    make_collection = function() {
      var nodeCollection;
      nodeCollection = new collections([
        new search_prop({
          template: "#search-template"
        })
      ]);
      return nodeCollection;
    };
    search_prop = Backbone.Model.extend({
      defaults: {
        searchInput: ""
      },
      setInput: function(msg) {
        return this.set({
          searchInput: msg
        });
      }
    });
    collections = Backbone.Collection.extend({
      model: search_prop
    });
    searchsView = Backbone.Marionette.ItemView.extend({
      initialize: function(options) {
        this.template = options.model.attributes.template;
        return this.bindTo(this.model, "change", this.render);
      },
      tagName: 'li',
      className: "list_item"
    });
    searchView = Backbone.Marionette.CompositeView.extend({
      itemView: searchsView,
      itemViewOptions: this.model,
      template: "#wrapper_dashboard",
      itemViewContainer: "ul",
      id: "search",
      events: {
        "click #search-btn": "update"
      },
      update: function() {
        var searchField;
        searchField = $('#search-main').val();
        if (searchField.length < 1) {
          return alert("Please Enter Text");
        } else {
          return Meshable.vent.trigger("search:gateways", searchField);
          /*window.forge.ajax
          					url: "http://devbuildinglynx.apphb.com/api/address"
          					data: { address: searchField, pagenum: 0 }
          					dataType: "json"
          					type: "GET"
          					error: (e) -> 
          						alert "An error occurred on search... sorry!"
          					success: (data) =>
          						if data.isAuthenticated == false
          							myvent.trigger "auth:logout"
          						else if data.length == 0
          							alert "No Results" 
          						else 
          							for node in data
          								
          								gateway = Backbone.Model.extend 
          									initialize: -> 
          											@set
          												trafficlight: "green"		
          										defaults: 				 				
          											trafficlight: "green" 			
          											
          									
          								gateways = Backbone.Collection.extend
          									model: gateway	
          								
          							
          							
          								gatewayView = Backbone.Marionette.ItemView.extend
          									initialize: (gateway) ->
          										
          										@bindTo @model, "change", @render
          										
          										
          									template: '#gatewayitem-template'
          									tagName: 'li'
          									className: "list_item"
          									id: "gatewayItm"
          									
          										
          
          							
          								gatewayCompView = Backbone.Marionette.CompositeView.extend
          									itemView: gatewayView
          									template: "#wrapper_search_results"
          									itemViewContainer: "ul"
          									id: "gateway"
          									
          										
          									
          									appendHtml: (collectionView, itemView) ->
          										collectionView.$("#results_insert").append(itemView.el) 
          							
          								
          								
          								
          												
          								nodeCollection = new gateways
          								for model in data
          									cModel = new gateway
          									nodeCollection.add cModel.parse(model)
          								gateView = new gatewayCompView
          									collection: nodeCollection
          							
          								gateView.render()
          								$('#search_insert').empty();
          								$('#search_insert').append($(gateView.el))
          								$('#results_insert').listview('refresh')
          								$('.ui-page-active .ui-listview').listview('refresh')
          								$('.ui-page-active :jqmData(role=content)').trigger('create')
          								$('#results_insert').trigger('create')
          								$('#search_insert').trigger('create')
          								$('#search_insert').listview('refresh')
          */

        }
      },
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#dashboard_insert").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:search", function() {
      var search;
      search = new searchView({
        collection: make_collection()
      });
      Meshable.currentpage = "search";
      $.mobile.changePage($('#splash2'), {
        changeHash: false,
        transition: 'none',
        showLoadMsg: false
      });
      Meshable.loginRegion.close();
      Meshable.mainRegion.close();
      Meshable.searchRegion.show(search);
      return changePage(search, false);
    });
    return changePage = function(page, direction) {
      var trans;
      $(page.el).attr("data-role", "page");
      trans = "slide";
      if (this.firstPage) {
        trans = "none";
        this.firstPage = false;
      }
      return $.mobile.changePage($(page.el), {
        changeHash: true,
        reverse: direction,
        transition: "none"
      });
    };
  });

}).call(this);
