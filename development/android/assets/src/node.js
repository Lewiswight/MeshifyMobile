// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var changePage, displayResults, node, nodeCompView, nodeView, nodes;
    node = Backbone.Model.extend({
      initialize: function() {
        return this.set({
          trafficlight: "green"
        });
      },
      defaults: {
        trafficlight: "green"
      }
    });
    nodes = Backbone.Collection.extend({
      model: node
    });
    nodeView = Backbone.Marionette.ItemView.extend({
      initialize: function(node) {
        return this.bindTo(this.model, "change", this.render);
      },
      template: '#node-template',
      tagName: 'li'
    });
    nodeCompView = Backbone.Marionette.CompositeView.extend({
      itemView: nodeView,
      template: "#wrapper_dashboard",
      itemViewContainer: "ul",
      id: "node",
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#dashboard_insert").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:node", function(model) {
      return displayResults(model.attributes.channles);
    });
    displayResults = function(data) {
      var nodeCoView, nodeCollection, tempNode;
      nodeCollection = new nodes;
      tempNode = new node;
      nodeCollection.add(tempNode.parse(data));
      nodeCoView = new nodeCompView({
        collection: nodeCollection
      });
      Meshable.currentpage = "nodes";
      $.mobile.changePage($('#splash'), {
        changeHash: false,
        transition: 'none',
        showLoadMsg: false
      });
      Meshable.loginRegion.close();
      Meshable.mainRegion.close();
      Meshable.mainRegion.show(nodeCoView);
      return changePage(nodeCoView, false);
    };
    return changePage = function(page, direction) {
      var trans;
      $(page.el).attr("data-role", "page");
      trans = "slide";
      if (this.firstPage) {
        trans = "none";
        this.firstPage = false;
      }
      return $.mobile.changePage($(page.el), {
        changeHash: true,
        reverse: direction,
        transition: "none"
      });
    };
  });

}).call(this);
