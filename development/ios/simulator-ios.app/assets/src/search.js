// Generated by CoffeeScript 1.3.3
(function() {

  define(['jquery', 'jqm', 'backbone', 'underscore', 'marionette', 'Meshable', 'Events'], function($, jqm, Backbone, _, Marionette, Meshable, Events) {
    var changePage, collections, make_collection, searchView, search_prop, searchsView;
    make_collection = function() {
      var nodeCollection;
      nodeCollection = new collections([
        new search_prop({
          template: "#search-template"
        })
      ]);
      return nodeCollection;
    };
    search_prop = Backbone.Model.extend({
      defaults: {
        searchInput: ""
      },
      setInput: function(msg) {
        return this.set({
          searchInput: msg
        });
      }
    });
    collections = Backbone.Collection.extend({
      model: search_prop
    });
    searchsView = Backbone.Marionette.ItemView.extend({
      initialize: function(options) {
        this.template = options.model.attributes.template;
        return this.bindTo(this.model, "change", this.render);
      },
      tagName: 'li',
      className: "list_item"
    });
    searchView = Backbone.Marionette.CompositeView.extend({
      itemView: searchsView,
      itemViewOptions: this.model,
      template: "#wrapper_dashboard",
      itemViewContainer: "ul",
      id: "search",
      events: {
        "click #search-btn": "update"
      },
      update: function() {
        var searchField,
          _this = this;
        searchField = $('#search-main').val();
        return window.forge.ajax({
          url: "http://devbuildinglynx.apphb.com/api/address",
          data: {
            address: searchField,
            pagenum: 0
          },
          dataType: "json",
          type: "GET",
          error: function(e) {
            return alert("An error occurred on search... sorry!");
          },
          success: function(data) {
            var node, _i, _len, _results;
            if (data.isAuthenticated === false) {
              return myvent.trigger("auth:logout");
            } else if (data.length === 0) {
              return alert("No Results");
            } else {
              _results = [];
              for (_i = 0, _len = data.length; _i < _len; _i++) {
                node = data[_i];
                _results.push(alert(node.location.name));
              }
              return _results;
            }
          }
        });
      },
      appendHtml: function(collectionView, itemView) {
        return collectionView.$("#dashboard_insert").append(itemView.el);
      }
    });
    Meshable.vent.on("goto:search", function() {
      /*window.forge.ajax
      			url: "http://devbuildinglynx.apphb.com/api/dashboard"
      			dataType: "json"
      			type: "GET"
      			error: (e) -> 
      				alert e.content
      			success: (data) ->
      				nodeCollection = new dashboards
      				for model in data
      					cModel = new dashboard
      					nodeCollection.add cModel.parse(model)
      				dashView = new dashboardsView
      					collection: nodeCollection
      */

      var search;
      search = new searchView({
        collection: make_collection()
      });
      Meshable.currentpage = "search";
      $.mobile.changePage($('#splash2'), {
        changeHash: false,
        transition: 'none',
        showLoadMsg: false
      });
      Meshable.loginRegion.close();
      Meshable.mainRegion.close();
      Meshable.searchRegion.show(search);
      return changePage(search, false);
    });
    return changePage = function(page, direction) {
      var trans;
      $(page.el).attr("data-role", "page");
      trans = "slide";
      if (this.firstPage) {
        trans = "none";
        this.firstPage = false;
      }
      return $.mobile.changePage($(page.el), {
        changeHash: true,
        reverse: direction,
        transition: "none"
      });
    };
  });

}).call(this);
